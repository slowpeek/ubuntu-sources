#!/usr/bin/env bash
# shellcheck disable=SC2154

# MIT license (c) 2021-2024 https://github.com/slowpeek
# Homepage: https://github.com/slowpeek/ubuntu-sources
# About: Apt sources generator for Ubuntu and Debian

case "$BASH_VERSION" in
    [2-3].*|4.[0-2]*)
        echo "This script requires bash 4.3, yours is $BASH_VERSION"
        exit 1 ;;
esac

set -eu

SCRIPT_VERSION=24.06.xx+git
SCRIPT_SELF=${BASH_SOURCE[0]##*/}

if [[ -t 2 ]]; then
    t_green=$'\e[32m'
    t_red=$'\e[31m'
    t_yellow=$'\e[33m'
    t_reset=$'\e(B\e[m'
else
    t_green=
    t_red=
    t_yellow=
    t_reset=
fi

verb=3

_log() {
    (( verb >= $1 )) || return 0
    echo "$2" "${@:3}" >&2
}

log_info() { _log 3 "${t_green}info:${t_reset}" "$@"; }
log_warn() { _log 2 "${t_yellow}warning:${t_reset}" "$@"; }
log_err() { _log 1 "${t_red}error:${t_reset}" "$@"; }

bye() {
    log_err "$@"
    exit 1
}

[[ $SCRIPT_SELF == *@(ubuntu|debian)* ]] ||
    bye 'The script should be called by a name containing either "ubuntu" or "debian"'

if [[ $SCRIPT_SELF == *ubuntu* ]]; then
    os=ubuntu
    os_components=(restricted universe multiverse)
    # In the following, it is assumed security comes first
    os_suites=(security updates backports proposed)
    os_url_security=http://security.ubuntu.com/ubuntu/
    os_url_region=http://CC.archive.ubuntu.com/ubuntu/
    os_url_old=http://old-releases.ubuntu.com/ubuntu/
    os_url_cdn=mirror://mirrors.ubuntu.com/mirrors.txt
    os_url=http://archive.ubuntu.com/ubuntu/
    os_region_warning=n
    os_release_format='*.*'
    os_reject=
    os_future='[2-9][0-9].@(04|10)'
    os_classic='@(?|1?|2[0-3]).*'

    # Format: release:name[:is_current]. "Current" means it is listed in the repos
    # for supported releases. It could be not in sync with the official EOL terms
    os_matrix=(
        24.04:noble:y    24.10:oracular:y 25.04:plucky:y
        22.04:jammy:y    22.10:kinetic    23.04:lunar:y    23.10:mantic:y
        20.04:focal:y    20.10:groovy     21.04:hirsute    21.10:impish
        18.04:bionic:y   18.10:cosmic     19.04:disco      19.10:eoan
        16.04:xenial:y   16.10:yakkety    17.04:zesty      17.10:artful
        14.04:trusty:y   14.10:utopic     15.04:vivid      15.10:wily
        12.04:precise    12.10:quantal    13.04:raring     13.10:saucy
        10.04:lucid      10.10:maverick   11.04:natty      11.10:oneiric
        8.04:hardy       8.10:intrepid    9.04:jaunty      9.10:karmic
        6.06:dapper      6.10:edgy        7.04:feisty      7.10:gutsy
        --               4.10:warty       5.04:hoary       5.10:breezy
    )

    os_set_distro_hook() {
        :
    }

    os_security_suite_hook() {
        :
    }

    os_usage() {
        cat <<'EOF'
OPTIONS (defaults are star-marked) --
  --restricted --universe --multiverse
  --no-restricted* --no-universe* --no-multiverse*
                             Toggle the corresponding component

  --all                      Shortcut for --restricted --universe --multiverse

  --security* --updates* --backports --proposed
  --no-security --no-updates --no-backports* --no-proposed*
                             Toggle the corresponding suite

  --direct-security* --no-direct-security
                             Toggle use of security.ubuntu.com for the security
                             suite. If disabled, generic mirrors are used
                             instead. Only applicable to current releases

  --src --no-src*            Toggle deb-src repo
  --deb822** --no-deb822     Toggle deb822 format. On since Ubuntu 24.04

  --script                   Wrap the generated list into a script to write it
                             to the default location

EXAMPLES --
  ubuntu-sources jammy
  ubuntu-sources --universe --no-updates --src noble
  ubuntu-sources --all --no-multiverse --backports 24.04 fr

EOF
    }
else
    os=debian
    os_components=(contrib non_free non_free_firmware)
    # In the following, it is assumed security comes first
    os_suites=(security updates backports backports_sloppy proposed_updates)
    os_url_security=http://security.debian.org/debian-security/
    os_url_region=http://ftp.CC.debian.org/debian/
    os_url_old=http://archive.debian.org/debian/
    os_url_cdn=http://deb.debian.org/debian/
    os_url=http://deb.debian.org/debian/
    os_region_warning=y
    os_release_format='*'
    os_reject='[1-6]?(.*)'
    os_future='[1-9][0-9]'
    os_classic='@(?|1[01])'

    # Format: release:name[:is_current]. "Current" means it is listed in the repos
    # for supported releases. It could be not in sync with the official EOL terms
    os_matrix=(
        10:buster:y      11:bullseye:y    12:bookworm:y    13:trixie:y
        --               7:wheezy         8:jessie         9:stretch
        # Not supported releases. Upcase X is important
        X:squeeze        --               --               --
        X:woody          X:sarge          X:etch           X:lenny
        X:bo             X:hamm           X:slink          X:potato
        --               --               X:buzz           X:rex
    )

    os_set_distro_hook() {
        if [[ -n $distro_number && $distro_number -lt 12 ]]; then
            # non-free-firmware is a thing since 12
            array_del os_components non_free_firmware
            array_del defaults 'non_free_firmware:*'
            known_opts=${known_opts/:non_free_firmware:/:}
        fi
    }

    os_security_suite_hook() {
        (( distro_number > 10 )) || suite=$distro/updates
    }

    os_usage() {
        cat <<'EOF'
OPTIONS (defaults are star-marked) --
  --contrib --non-free --non-free-firmware
  --no-contrib* --no-non-free* --no-non-free-firmware*
                             Toggle the corresponding component

  --all                      Shortcut for --contrib --non-free and
                             --non-free-firmware, if applicable

  --security* --updates* --backports --backports-sloppy --proposed-updates
  --no-security --no-updates --no-backports* --no-backports-sloppy* --no-proposed-updates*
                             Toggle the corresponding suite

  --direct-security* --no-direct-security
                             Toggle use of security.debian.org for the security
                             suite. If disabled, generic mirrors are used
                             instead. Only applicable to current releases

  --src --no-src*            Toggle deb-src repo
  --deb822** --no-deb822     Toggle deb822 format. On since Debian 12

  --script                   Wrap the generated list into a script to write it
                             to the default location

EXAMPLES --
  debian-sources bullseye
  debian-sources --contrib --no-updates --src bookworm
  debian-sources --all --no-non-free-firmware --backports 12 fr

EOF
    }
fi

version() {
    echo "${os}-sources ${SCRIPT_VERSION}"
    exit
}

usage () {
    cat <<EOF
Usage: ${os}-sources [options] distro [region]

Distro can be either a name or a version number.

REGION TO MIRROR RELATION --
  CC country code            ${os_url_region}
  cdn                        ${os_url_cdn}
  old                        ${os_url_old}

  If region is not set, the mirror used is ${os_url}.
  Old known releases are treated as such without explicit 'old' region.

GENERIC OPTIONS --
  -h, --help                 Show usage
  -q                         Mute info messages. Use it twice (or -qq) to mute
                             warnings as well
  -V, --version              Show version

$(os_usage)

Homepage: https://github.com/slowpeek/ubuntu-sources
EOF

    exit
}

is_opt() {
    [[ $known_opts == *:"$1":* ]]
}

set_opt() {
    local -n ref=opt_$1
    ref=$2
}

eq_opt() {
    local -n ref=opt_$1
    [[ $ref == "$2" ]]
}

# Upper: plan components distro lines
apt_list () {
    local url el init=y

    if [[ $opt_deb822 == y ]]; then
        local suites=()

        for el in "${plan[@]}"; do
            if [[ $init == y ]]; then
                url=$el
                init=n
            elif [[ $el == . ]]; then
                lines+=(
                    "Types: $*"
                    "URIs: ${url}"
                    "Suites: ${suites[*]}"
                    "Components: ${components[*]}"
                    "Signed-By: /usr/share/keyrings/${os}-archive-keyring.gpg"
                    ''
                )

                suites=()
                init=y
            else
                suites+=("$el")
            fi
        done
    else
        local type

        for type; do
            for el in "${plan[@]}"; do
                if [[ $init == y ]]; then
                    url=$el
                    init=n
                elif [[ $el == . ]]; then
                    init=y
                else
                    lines+=("${type} ${url} ${el} ${components[*]}")
                fi
            done

            lines+=('')
        done
    fi
}

# Outer: pool
set_pool () {
    pool=()

    local el
    for el in "${os_matrix[@]}"; do
        [[ $el == -- ]] || pool+=("$el")
    done
}

# Outer: distro distro_number is_current
set_distro () {
    local pool=()
    set_pool

    distro=${1,,}
    distro_number=

    # shellcheck disable=SC2053
    [[ ! $distro == $os_reject ]] ||
        bye "This script does not support ${os^} ${distro}"

    # Strip point release.
    # shellcheck disable=SC2295
    distro=${distro%."${distro#${os_release_format}.}"}

    # Check $pool for known names and version numbers.

    local el release name status
    for el in "${pool[@]}"; do
        IFS=: read -r release name status <<< "$el"

        if [[ $distro == "$release" || $distro == "$name" ]]; then
            [[ ! $release == X ]] ||
                bye "This script does not support ${os^} ${distro^}"

            distro=$name
            distro_number=$release
            is_current=${status:-n}
            return
        fi
    done

    # Check for single-word names.

    if [[ ${#distro} -gt 3 && $distro == +([a-z]) ]]; then
        log_warn "The script is not aware of ${os^} ${distro^}." \
                 "It may be a new release or you spelled it wrong"

        # Assume a current release.
        is_current=y
        return
    fi

    # Check for numeric versions.

    # shellcheck disable=SC2053
    if [[ $distro == $os_future ]]; then
        bye "The script is not aware of ${os^} ${distro}." \
            "Use its name instead of the numbers"
    fi

    bye "'${1,,}' doesnt look like a valid ${os^} release"
}

print_header() {
    if [[ $script == y ]]; then
        local path=sources.list
        [[ $opt_deb822 == n ]] || path=sources.list.d/${os}.sources

        echo "tee /etc/apt/${path} >/dev/null <<'EOF'"
    fi

    echo "# -- Generated by ${os}-sources ${SCRIPT_VERSION}"
    echo
}

print_footer() {
    local args=() el opt neg

    # Figure out which options differ from the defaults.

    for el in "${defaults[@]}"; do
        opt=${el%:*}

        if ! eq_opt "$opt" "${el#*:}"; then
            eq_opt "$opt" y && neg= || neg=no-
            args+=("--${neg}${opt//_/-}")
        fi
    done

    local test_all
    printf -v test_all ' --%s' "${os_components[@]//_/-}"

    # If all $os_components are enabled, replace it with --all
    if [[ ${args[*]+"${args[*]}"} == "${test_all:1}"* ]]; then
        args=(--all "${args[@]:${#os_components[@]}}")
    fi

    args+=("$distro")
    [[ -z $region ]] || args+=("$region")

    echo "# -- ${os}-sources ${args[*]}"

    [[ $script == n ]] || echo EOF
}

set_default() {
    local el i=0

    for el in "${defaults[@]}"; do
        if [[ $el == "$1":* ]]; then
            defaults[i]=$1:$2
            break
        fi

        (( ++i ))
    done
}

import_defaults() {
    local el

    for el in "${defaults[@]}"; do
        local -n ref=opt_${el%:*}
        [[ -v ref ]] || ref=${el#*:}
        unset -n ref
    done
}

# In array $1 delete the last element matching pattern $2.
array_del() {
    local -n ref=$1
    local i

    for (( i=${#ref[@]}-1; i>0; i--)); do
        # shellcheck disable=SC2053
        if [[ ${ref[i]} == $2 ]]; then
            unset -v 'ref[i]'
            ref=("${ref[@]}")
            break
        fi
    done
}

_() {
    unset -f _

    defaults=()
    known_opts=:

    local opt flag el

    # Import $os_compotents into $defaults, disabled. print_footer() assumes
    # $defaults start with $os_components
    for opt in "${os_components[@]}"; do
        defaults+=("$opt:n")
    done

    # Import $os_suites into $defaults, enable security and updates
    for opt in "${os_suites[@]}"; do
        flag=y
        [[ $opt == @(security|updates) ]] || flag=n
        defaults+=("$opt:$flag")
    done

    defaults+=(
        direct_security:y
        src:n
        deb822:y
    )

    # Ensure known opt_ vars dont exist on start and propagate $known_opts
    for el in "${defaults[@]}"; do
        opt=${el%:*}

        unset -v opt_"$opt"
        known_opts+=$opt:
    done

    # The --script option does not affect the sources list generation, it only
    # provides wrapping. It should be out of $defaults, otherwise print_footer()
    # would mention it as well if set
    script=n
}; _

main () {
    local opt val
    while (( $# )); do
        case $1 in
            --)
                shift
                break ;;

            -h|--help)
                usage ;;

            -q)
                (( --verb )) || verb=1 ;;

            -qq)
                verb=1 ;;

            --script)
                script=y ;;

            -V|--version)
                version ;;

            --all)
                for opt in "${os_components[@]}"; do
                    set_opt "$opt" y
                done ;;

            --*)
                opt=${1:2}
                val=y

                if [[ $opt == no-* ]]; then
                    opt=${opt:3}
                    val=n
                fi

                opt=${opt//-/_}

                is_opt "$opt" || bye "Unknown option '$1'"
                set_opt "$opt" "$val" ;;

            -*)
                bye "Unknown option '$1'" ;;

            *)
                break ;;
        esac

        shift
    done

    (( $# )) || usage

    local distro distro_number is_current
    set_distro "$1"
    os_set_distro_hook

    # shellcheck disable=SC2053
    [[ ! $distro_number == $os_classic ]] || set_default deb822 n

    import_defaults

    local region=${2-} url=$os_url_old
    region=${region,,}

    if [[ $is_current == y ]]; then
        case $region in
            '')
                url=$os_url ;;
            cdn)
                url=$os_url_cdn ;;
            old)
                is_current=n ;;
            [a-z][a-z])
                url=${os_url_region/CC/$region}

                [[ $opt_direct_security == y || $os_region_warning == n ]] ||
                    log_warn 'Not all country mirrors provide the security suite' ;;
            *)
                bye "Invalid region value '${region}'" ;;
        esac
    else
        [[ ${region:-old} == old ]] ||
            log_warn "${os^} ${distro^} is an old release, region is inapplicable"

        region=
    fi

    local url_security=${url%/*/}/${os_url_security#*://*/}
    [[ $url == *"/$os/" ]] || url_security=$url

    [[ $opt_direct_security == n || $is_current == n ]] ||
        url_security=$os_url_security

    local plan=("$url" "$distro") suite

    # Assuming security comes first in $os_suites
    for suite in "${os_suites[@]:1}"; do
        eq_opt "$suite" n || plan+=("${distro}-${suite//_/-}")
    done

    if [[ $opt_security == y ]]; then
        [[ $url == "$url_security" ]] || plan+=(. "$url_security")
        suite=$distro-security
        os_security_suite_hook
        plan+=("$suite")
    fi

    plan+=(.)

    local components=(main)

    for opt in "${os_components[@]}"; do
        eq_opt "$opt" n || components+=("${opt//_/-}")
    done

    local lines=() types=(deb)
    [[ $opt_src == n ]] || types+=(deb-src)

    apt_list "${types[@]}"

    print_header
    printf '%s\n' "${lines[@]}"
    print_footer
}

[[ ! $SCRIPT_SELF == "${0##*/}" ]] || main "$@"
